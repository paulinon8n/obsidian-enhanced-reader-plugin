import fs from 'fs';
import path from 'path';

function toDataUrl(buf, mime = 'font/woff') {
  const b64 = Buffer.from(buf).toString('base64');
  return `data:${mime};base64,${b64}`;
}

function resolveOpenDyslexicDir() {
  // Resolve via node_modules relative to project root
  return path.resolve('node_modules', 'open-dyslexic', 'woff');
}

function readFont(fontDir, file) {
  const full = path.join(fontDir, file);
  return fs.readFileSync(full);
}

function generateTs(css) {
  return `// Auto-generated by scripts/generate-open-dyslexic.mjs\n// Do not edit by hand.\n\nconst OPEN_DYSLEXIC_CSS = String.raw\`\n${css}\n\`;\n\nexport default OPEN_DYSLEXIC_CSS;\n`;
}

function main() {
  const outFile = path.resolve('src/assets/OpenDyslexicCss.ts');
  const fontDir = resolveOpenDyslexicDir();
  const regular = toDataUrl(readFont(fontDir, 'OpenDyslexic-Regular.woff'));
  const bold = toDataUrl(readFont(fontDir, 'OpenDyslexic-Bold.woff'));
  const italic = toDataUrl(readFont(fontDir, 'OpenDyslexic-Italic.woff'));
  const boldItalic = toDataUrl(readFont(fontDir, 'OpenDyslexic-BoldItalic.woff'));

  const css = `@font-face {\n  font-family: 'OpenDyslexic';\n  src: url(${regular}) format('woff');\n  font-weight: 400;\n  font-style: normal;\n  font-display: swap;\n}\n@font-face {\n  font-family: 'OpenDyslexic';\n  src: url(${bold}) format('woff');\n  font-weight: 700;\n  font-style: normal;\n  font-display: swap;\n}\n@font-face {\n  font-family: 'OpenDyslexic';\n  src: url(${italic}) format('woff');\n  font-weight: 400;\n  font-style: italic;\n  font-display: swap;\n}\n@font-face {\n  font-family: 'OpenDyslexic';\n  src: url(${boldItalic}) format('woff');\n  font-weight: 700;\n  font-style: italic;\n  font-display: swap;\n}`;

  const ts = generateTs(css);
  fs.mkdirSync(path.dirname(outFile), { recursive: true });
  fs.writeFileSync(outFile, ts, 'utf8');
  console.log(`Wrote ${outFile}`);
}

main();
